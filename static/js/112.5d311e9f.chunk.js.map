{"version":3,"file":"static/js/112.5d311e9f.chunk.js","mappings":"0NAEaA,EAAMC,EAAAA,GAAAA,GAAH,qEAMHC,EAASD,EAAAA,GAAAA,GAAH,0DAEN,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,UAAUC,CAAtB,IAGDC,EAAgBN,EAAAA,GAAAA,EAAH,+DACZ,SAAAE,GAAC,OAAIA,EAAEC,MAAMI,MAAM,EAAlB,IACA,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,YAAYC,IAAxB,IAEHC,EAAgBV,EAAAA,GAAAA,EAAH,8CACZ,SAAAE,GAAC,OAAIA,EAAEC,MAAMI,MAAM,EAAlB,I,sDCfFI,EAAkB,mCAAG,WAAOC,GAAP,uFACPC,MAAM,GAAD,OAAIC,EAAAA,GAAJ,iBAAgBF,EAAhB,4BAAsCG,EAAAA,KADpC,YACxBC,EADwB,QAGbC,GAHa,yCAIfD,EAASE,QAJM,gCAMfC,QAAQC,OAAO,IAAIC,MAAJ,yEANA,2CAAH,sD,kBC0D/B,EAtDa,WACT,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACOC,GAAYC,EAAAA,EAAAA,MAAZD,SACP,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAuBA,OApBAC,EAAAA,EAAAA,YAAU,WAENlB,EAAmBmB,OAAOL,IACrBM,MAAK,SAAAf,GACF,GAA6B,IAAzBA,EAASO,KAAKS,OAGd,OADAJ,EAASP,OACFF,QAAQC,OAAO,IAAIC,MAAJ,0EAG1BO,EAAS,MACTJ,EAAQR,EAASO,KAEpB,IAAEU,OAAM,SAAAN,GACLC,EAASD,EACZ,GAGR,GAAE,CAACF,IAECF,GAOD,UAACxB,EAAD,CAAKmC,GAAG,KAAR,UACKP,IAAS,2BAAMA,EAAMQ,QAAZ,OACTZ,EAAKS,OAAS,EACTT,EAAKa,KAAI,YAAqD,IAAlDxB,EAAiD,EAAjDA,GAAIyB,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAE3C,OACI,UAACtC,EAAD,WACKoC,GACK,gBAAKG,IAAG,6CAAwCH,GAAgBI,IAAKH,EAAeI,MAAM,SAC1F,gBAAKF,IAAKG,EAAeF,IAAKH,EAAeI,MAAM,SAEzD,UAACpC,EAAD,eAAiBgC,MACjB,UAAC5B,EAAD,0BAA6B6B,OANpB3B,EASpB,KACC,6EAtBH,IAyBd,C,2xKC3DD,SAASgC,EAAmBC,EAAKC,EAAS1B,EAAQ2B,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOzB,GAEP,YADAP,EAAOO,EAET,CAEIwB,EAAKE,KACPP,EAAQM,GAERjC,QAAQ2B,QAAQM,GAAOrB,KAAKgB,EAAOC,EAEvC,CAEe,SAASM,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIxC,SAAQ,SAAU2B,EAAS1B,GACpC,IAAIyB,EAAMU,EAAGK,MAAMJ,EAAME,GAEzB,SAASX,EAAMK,GACbR,EAAmBC,EAAKC,EAAS1B,EAAQ2B,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOa,GACdjB,EAAmBC,EAAKC,EAAS1B,EAAQ2B,EAAOC,EAAQ,QAASa,EACnE,CAEAd,OAAMe,EACR,GACF,CACF,C","sources":["components/Cast/Cast.styled.js","utils/FechCastsAboutFilms.jsx","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Box = styled.ul`\ndisplay:flex;\nflex-wrap: wrap;\ngap: 15px;\n`\n\nexport const LiItem = styled.li`\nwidth: 180px;\nfont-size: ${p => p.theme.fontSizes.m};\n\n`\nexport const TitleNameCast = styled.p`\nmargin-top: ${p => p.theme.space[4]}px;\nfont-weight: ${p => p.theme.fontWeights.bold};\n`\nexport const TitleCaracter = styled.p`\nmargin-top: ${p => p.theme.space[3]}px;\n\n`\n","import { KEY, URL } from './FetchMovies';\n\n\nexport const fechCastsAboutFilm = async (id) => {\n    const response = await fetch(`${URL}movie/${id}/credits?api_key=${KEY}`)\n    \n        if (response.ok) {\n            return response.json();\n        }\n            return Promise.reject(new Error(`Sorry, but we can't find cast information about this film. Try more`))\n}\n    \n\n","import { Box, LiItem, TitleNameCast,TitleCaracter } from './Cast.styled';\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fechCastsAboutFilm } from '../../utils/FechCastsAboutFilms';\nimport imageNotFound from '../../img/user.jpg';\n\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const {renderId} = useParams();\n    const [error, setError] = useState(null);\n\n\n    useEffect(() => {\n        \n        fechCastsAboutFilm(Number(renderId))\n            .then(response => {\n                if (response.cast.length === 0) {\n\n                    setError(Error)\n                    return Promise.reject(new Error(`Sorry, but we can't find cast information about this film. Try again.`))\n                }\n\n                setError(null);\n                setCast(response.cast)\n                \n            }).catch(error => {\n                setError(error)\n            })\n            \n\n    }, [renderId]);\n        \n    if (!cast) {\n        return null\n    }\n\n    \n    return (\n\n        <Box as=\"ul\">\n            {error && <div>{error.message} </div>}\n            {cast.length > 0\n                ? cast.map(({ id, profile_path, original_name, character }) => { \n               \n                    return  (\n                        <LiItem key={id}>\n                            {profile_path\n                                ? <img src={`https://www.themoviedb.org/t/p/w500${profile_path}`} alt={original_name} width='100' />\n                                : <img src={imageNotFound} alt={original_name} width='100' />\n                            }                          \n                            <TitleNameCast> {original_name}</TitleNameCast>\n                            <TitleCaracter > Character: {character}</TitleCaracter>\n                        </LiItem>\n                    )\n                })\n                : <p> Cast information about this film dont found! </p>}\n        </Box>\n    )\n}\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Box","styled","LiItem","p","theme","fontSizes","m","TitleNameCast","space","fontWeights","bold","TitleCaracter","fechCastsAboutFilm","id","fetch","URL","KEY","response","ok","json","Promise","reject","Error","useState","cast","setCast","renderId","useParams","error","setError","useEffect","Number","then","length","catch","as","message","map","profile_path","original_name","character","src","alt","width","imageNotFound","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}